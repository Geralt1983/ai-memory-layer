name: Embedding Provider Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'integrations/**'
      - 'tests/test_*embedding*'
      - 'tests/test_*provider*'  
      - 'tests/test_*factory*'
      - 'tests/test_*dualwrite*'
      - 'tests/test_*fallback*'
      - 'tests/conftest.py'
      - 'requirements*.txt'
      - '.github/workflows/embeddings-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'integrations/**'
      - 'tests/test_*embedding*'
      - 'tests/test_*provider*'
      - 'tests/test_*factory*'
      - 'tests/test_*dualwrite*'
      - 'tests/test_*fallback*'
      - 'tests/conftest.py'
      - 'requirements*.txt'

jobs:
  test-embeddings:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e ".[dev]"
    
    - name: Install optional embedding providers
      run: |
        pip install voyageai cohere || echo "Optional providers failed to install"
    
    - name: Run unit tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test-key' }}
        VOYAGE_API_KEY: ${{ secrets.VOYAGE_API_KEY || 'test-key' }}
        COHERE_API_KEY: ${{ secrets.COHERE_API_KEY || 'test-key' }}
      run: |
        pytest tests/test_*embedding*.py -v -m unit --tb=short
        pytest tests/test_providers_contract.py -v -m unit --tb=short
        pytest tests/test_factory_selection.py -v -m unit --tb=short
        pytest tests/test_fallback_behavior.py -v -m unit --tb=short
        pytest tests/test_embeddings_dualwrite.py -v --tb=short
    
    - name: Run integration tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test-key' }}
        VOYAGE_API_KEY: ${{ secrets.VOYAGE_API_KEY || 'test-key' }}
        COHERE_API_KEY: ${{ secrets.COHERE_API_KEY || 'test-key' }}
      run: |
        pytest tests/test_*embedding*.py -v -m integration --tb=short || echo "Integration tests may fail without real API keys"
        pytest tests/test_healthcheck.py -v -m integration --tb=short || echo "Health tests may fail without FastAPI"
    
    - name: Run property-based tests
      env:
        OPENAI_API_KEY: test-key
        VOYAGE_API_KEY: test-key
        COHERE_API_KEY: test-key
      run: |
        pytest tests/test_property_and_chaos.py -v -m property --tb=short --maxfail=3
    
    - name: Run chaos tests (flaky)
      env:
        OPENAI_API_KEY: test-key
        VOYAGE_API_KEY: test-key
        COHERE_API_KEY: test-key
      run: |
        pytest tests/test_property_and_chaos.py -v -m chaos --tb=short --maxfail=1 --reruns 2 || echo "Chaos tests are expected to be flaky"
    
    - name: Run performance benchmarks
      env:
        OPENAI_API_KEY: test-key
        VOYAGE_API_KEY: test-key
        COHERE_API_KEY: test-key
      run: |
        pytest tests/test_property_and_chaos.py -v -m benchmark --benchmark-only --benchmark-sort=mean || echo "Benchmarks are optional"

  test-provider-combinations:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        provider-config:
          - { primary: "openai", routing: "default:openai" }
          - { primary: "voyage", routing: "obsidian:voyage,default:openai" }
          - { ab_write: "openai,voyage" }
          - { ab_write: "voyage:25" }
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e ".[dev]"
        pip install voyageai cohere || echo "Optional providers failed to install"
    
    - name: Test provider configuration - Primary
      if: matrix.provider-config.primary
      env:
        EMBEDDING_PROVIDER: ${{ matrix.provider-config.primary }}
        EMBED_ROUTING: ${{ matrix.provider-config.routing }}
        OPENAI_API_KEY: test-key
        VOYAGE_API_KEY: test-key
        COHERE_API_KEY: test-key
      run: |
        pytest tests/test_factory_selection.py::TestFactorySelection::test_env_provider_selection -v
        pytest tests/test_factory_selection.py::TestFactorySelection::test_routing_configuration -v
    
    - name: Test A/B configuration
      if: matrix.provider-config.ab_write
      env:
        EMBED_AB_WRITE: ${{ matrix.provider-config.ab_write }}
        OPENAI_API_KEY: test-key
        VOYAGE_API_KEY: test-key
        COHERE_API_KEY: test-key
      run: |
        pytest tests/test_factory_selection.py::TestFactorySelection::test_dual_write_comma_format -v
        pytest tests/test_factory_selection.py::TestFactorySelection::test_dual_write_percentage_format -v

  test-compatibility:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scenario:
          - name: "no-optional-deps"
            install: "pip install -r requirements.txt && pip install -e ."
          - name: "numpy-free"
            install: "pip install -r requirements.txt && pip install -e . && pip uninstall -y numpy"
          - name: "minimal-deps"
            install: "pip install fastapi uvicorn openai pytest"
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install scenario dependencies
      run: ${{ matrix.scenario.install }}
    
    - name: Test compatibility - ${{ matrix.scenario.name }}
      env:
        OPENAI_API_KEY: test-key
      run: |
        python -c "from integrations.embeddings_factory import get_embedder; print('Factory import successful')"
        python -c "embedder = __import__('integrations.embeddings_factory').embeddings_factory.get_embedder(); print('Embedder creation successful')"
        pytest tests/test_factory_selection.py::TestFactorySelection::test_default_provider -v || echo "Provider test failed in ${{ matrix.scenario.name }}"

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install bandit
      run: pip install bandit
    
    - name: Security scan - Embedding modules
      run: |
        bandit -r integrations/ -f json -o bandit-report.json || echo "Security issues found"
        bandit -r integrations/ || echo "Security scan completed with findings"
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json

  coverage-report:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e ".[dev]"
        pip install voyageai cohere || echo "Optional providers failed to install"
    
    - name: Run tests with coverage
      env:
        OPENAI_API_KEY: test-key
        VOYAGE_API_KEY: test-key
        COHERE_API_KEY: test-key
      run: |
        pytest tests/test_*embedding*.py tests/test_providers_contract.py tests/test_factory_selection.py tests/test_fallback_behavior.py tests/test_embeddings_dualwrite.py \
          --cov=integrations --cov-report=xml --cov-report=html --cov-fail-under=70
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          coverage.xml
          htmlcov/
    
    - name: Coverage comment
      if: github.event_name == 'pull_request'
      run: |
        echo "Coverage report generated. Minimum threshold: 70%" >> $GITHUB_STEP_SUMMARY
        grep -o 'line-rate="[^"]*"' coverage.xml | head -1 >> $GITHUB_STEP_SUMMARY || echo "Coverage data not found"