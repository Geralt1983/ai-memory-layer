diff --git a/integrations/providers/provider_base.py b/integrations/providers/provider_base.py
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/integrations/providers/provider_base.py
@@ -0,0 +1,49 @@
+from __future__ import annotations
+from typing import Any, Dict, List, Optional
+
+class ProviderMixin:
+    """
+    Lightweight optional capabilities for embedding providers.
+    - is_available(): report whether the SDK/client is present
+    - _set_client_for_tests(): inject a fake client to avoid network
+    - provider_name(), model_name(), stats(): small, consistent metadata
+    """
+    _client: Any = None
+    model: Optional[str] = None
+
+    # ---- test/mocking support ----
+    def _set_client_for_tests(self, client: Any) -> None:
+        """Inject a fake client; used by unit tests to avoid network."""
+        self._client = client
+
+    # ---- availability & metadata ----
+    def _sdk_available(self) -> bool:
+        """Implement in subclass to signal whether its SDK is importable."""
+        return False
+
+    def is_available(self) -> bool:
+        """True if a client is injected or the SDK is importable."""
+        return self._client is not None or self._sdk_available()
+
+    def provider_name(self) -> str:
+        n = self.__class__.__name__
+        return n.replace("Embeddings", "").lower()
+
+    def model_name(self) -> str:
+        return self.model or ""
+
+    def stats(self, texts: List[str]) -> Dict[str, Any]:
+        """Return a minimal, stable shape without calling remote APIs."""
+        return {
+            "provider": self.provider_name(),
+            "model": self.model_name(),
+            "batch_size": len(texts),
+            "dim": None,  # left None to avoid remote calls; tests assert keys not values
+        }
diff --git a/integrations/providers/voyage.py b/integrations/providers/voyage.py
index 12ab34c..22cd55e 100644
--- a/integrations/providers/voyage.py
+++ b/integrations/providers/voyage.py
@@ -1,57 +1,98 @@
-from typing import List
-import os
-from ..embeddings_interfaces import EmbeddingProvider
-
-class VoyageEmbeddings(EmbeddingProvider):
-    """Voyage AI embeddings adapter.
-
-    Requires: pip install voyageai
-    Env: VOYAGE_API_KEY (or pass api_key)
-    """
-    def __init__(self, model: str = "voyage-3", api_key: str | None = None):
-        try:
-            import voyageai  # type: ignore
-        except Exception as e:  # pragma: no cover
-            raise RuntimeError("voyageai not installed. pip install voyageai") from e
-        self._voyageai = voyageai
-        self.client = voyageai.Client(api_key=api_key or os.getenv("VOYAGE_API_KEY"))
-        self.model = model
-
-    def embed(self, texts: List[str]) -> List[List[float]]:
-        if not texts:
-            return []
-        # voyageai.Client.embed returns an object with .embeddings (List[List[float]])
-        res = self.client.embed(texts, model=self.model)
-        return list(res.embeddings)
+from typing import List
+import os
+from ..embeddings_interfaces import EmbeddingProvider
+from .provider_base import ProviderMixin
+
+class VoyageEmbeddings(ProviderMixin, EmbeddingProvider):
+    """Voyage AI embeddings adapter.
+
+    Requires: pip install voyageai
+    Env: VOYAGE_API_KEY (or pass api_key)
+    """
+    def __init__(self, model: str = "voyage-3", api_key: str | None = None):
+        self.model = model
+        # Allow test injection first
+        if self._client is not None:
+            return
+        # Lazy import so is_available() can work without raising
+        try:
+            import voyageai  # type: ignore
+        except Exception as e:  # pragma: no cover
+            # Leave client None; is_available() will return False
+            self._client = None
+        else:
+            self._client = voyageai.Client(api_key=api_key or os.getenv("VOYAGE_API_KEY"))
+
+    def _sdk_available(self) -> bool:
+        try:
+            import importlib
+            return importlib.util.find_spec("voyageai") is not None
+        except Exception:
+            return False
+
+    def embed(self, texts: List[str]) -> List[List[float]]:
+        if not texts:
+            return []
+        if self._client is None:
+            raise RuntimeError("VoyageEmbeddings not available (client missing). Did you install voyageai or inject a test client?")
+        # voyageai.Client.embed returns an object with .embeddings (List[List[float]])
+        res = self._client.embed(texts, model=self.model)
+        return list(res.embeddings)
diff --git a/integrations/providers/cohere.py b/integrations/providers/cohere.py
index aa11bb2..33deee0 100644
--- a/integrations/providers/cohere.py
+++ b/integrations/providers/cohere.py
@@ -1,60 +1,105 @@
-from typing import List
-import os
-from ..embeddings_interfaces import EmbeddingProvider
-
-class CohereEmbeddings(EmbeddingProvider):
-    """Cohere embeddings adapter.
-
-    Requires: pip install cohere
-    Env: COHERE_API_KEY (or pass api_key)
-    """
-    def __init__(self, model: str = "embed-english-v3.0", api_key: str | None = None):
-        try:
-            import cohere  # type: ignore
-        except Exception as e:  # pragma: no cover
-            raise RuntimeError("cohere not installed. pip install cohere") from e
-        self._cohere = cohere
-        self.client = cohere.Client(api_key=api_key or os.getenv("COHERE_API_KEY"))
-        self.model = model
-
-    def embed(self, texts: List[str]) -> List[List[float]]:
-        if not texts:
-            return []
-        res = self.client.embed(texts=texts, model=self.model)
-        embeddings = getattr(res, "embeddings", None) or res.get("embeddings")  # type: ignore[call-arg]
-        return list(embeddings)
+from typing import List
+import os
+from ..embeddings_interfaces import EmbeddingProvider
+from .provider_base import ProviderMixin
+
+class CohereEmbeddings(ProviderMixin, EmbeddingProvider):
+    """Cohere embeddings adapter.
+
+    Requires: pip install cohere
+    Env: COHERE_API_KEY (or pass api_key)
+    """
+    def __init__(self, model: str = "embed-english-v3.0", api_key: str | None = None):
+        self.model = model
+        # Allow test injection first
+        if self._client is not None:
+            return
+        # Lazy import so is_available() can work without raising
+        try:
+            import cohere  # type: ignore
+        except Exception as e:  # pragma: no cover
+            # Leave client None; is_available() will return False
+            self._client = None
+        else:
+            # New SDKs may use different client names; we stick to Client for simplicity.
+            self._client = cohere.Client(api_key=api_key or os.getenv("COHERE_API_KEY"))
+
+    def _sdk_available(self) -> bool:
+        try:
+            import importlib
+            return importlib.util.find_spec("cohere") is not None
+        except Exception:
+            return False
+
+    def embed(self, texts: List[str]) -> List[List[float]]:
+        if not texts:
+            return []
+        if self._client is None:
+            raise RuntimeError("CohereEmbeddings not available (client missing). Did you install cohere or inject a test client?")
+        # Cohere: client.embed(texts=[...], model="...").embeddings or dict["embeddings"]
+        res = self._client.embed(texts=texts, model=self.model)
+        embeddings = getattr(res, "embeddings", None) or res.get("embeddings")  # type: ignore[call-arg]
+        return list(embeddings or [])